{"version":3,"sources":["actions/postActions.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["FETCH_BOOKS","DELETE_ALL","DISPLAY_COMMENTS","DELETE_BOOK","ADD_COMMENT","initialState","books","comments","isHidden","isDeleted","isAllDeleted","index","_id","title","combineReducers","totalState","state","action","type","payload","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","NewBookForm","addBook","useState","value","setValue","onSubmit","e","preventDefault","placeholder","onChange","target","style","width","height","Comments","addComment","deleteBook","deleteAllBooks","borderStyle","borderWidth","padding","onClick","length","map","comment","key","console","log","BooksDisplay","book","dispComments","className","connect","fetchBooks","dispatch","a","fetch","json","then","catch","err","fetchData","newComments","getState","method","res","dataDelete","currentId","singleBookURL","URL","headers","data3","body","JSON","stringify","id","data2","newArrayOfComments","push","useEffect","textAlign","color","data0","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.35d08775.chunk.js","sourcesContent":["//action types, should be in seperate file\r\nimport store from \"../store.js\";\r\n\r\nexport const FETCH_BOOKS = \"FETCH_POSTS\";\r\n//export const COMMENTS = 'COMMENTS';\r\n//ADD_BOOK nie jest potrzebny, bo  poj. książka\r\n//jest tylko w stacie lokalnym! inaczej niż w przykładzie TRAVERSY\r\n//export const ADD_BOOK = 'ADD_BOOK';\r\nexport const DELETE_ALL = \"DELETE_ALL\";\r\n\r\nexport const DISPLAY_COMMENTS = \"DISPLAY_COMMENTS\";\r\n\r\nexport const DELETE_BOOK = \"DELETE_BOOK\";\r\n\r\n//ADD_COMMENT jednak jest potrzeby, żeby komentarze były wyświetlane ze stanu\r\n//comments, inaczej appka padała przy delete jeśli komentarze były wyświetlone\r\nexport const ADD_COMMENT = \"ADD_COMMENT\";\r\n//postAcions - should be in seperate file\r\n\r\nexport const fetchBooks = () => dispatch => {\r\n  async function fetchData() {\r\n    const res = await fetch(\"http://localhost:5000/api/books\");\r\n    res\r\n      .json()\r\n      .then(books =>\r\n        dispatch({\r\n          type: FETCH_BOOKS,\r\n          payload: books\r\n        })\r\n      )\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  fetchData();\r\n};\r\n\r\nexport const dispComments = index => dispatch => {\r\n  const newComments = {\r\n    isHidden: false,\r\n    isDeleted: false,\r\n    isAllDeleted: false,\r\n    index: index,\r\n    _id: store.getState().totalState.books[index]._id,\r\n    title: store.getState().totalState.books[index].title,\r\n    comments: store.getState().totalState.books[index].comments\r\n  };\r\n\r\n  dispatch({\r\n    type: DISPLAY_COMMENTS,\r\n    payload: newComments\r\n  });\r\n};\r\n\r\nexport const deleteBook = currentId => dispatch => {\r\n  let singleBookURL = new URL(\"http://localhost:5000/api/books/\" + currentId);\r\n\r\n  fetch(singleBookURL, {\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  })\r\n    .then(res => res.json())\r\n    .then(data3 => {\r\n      console.log(data3);\r\n\r\n      const newComments = {\r\n        isHidden: false,\r\n        isDeleted: true,\r\n        isAllDeleted: false,\r\n        index: store.getState().totalState.comments.index,\r\n        _id: store.getState().totalState.comments._id,\r\n        title: store.getState().totalState.comments.title,\r\n        comments: store.getState().totalState.comments.comments\r\n      };\r\n\r\n      dispatch({\r\n        type: DELETE_BOOK,\r\n        payload: newComments\r\n      });\r\n    });\r\n};\r\n\r\nexport const deleteAllBooks = () => dispatch => {\r\n  fetch(\"http://localhost:5000/api/books\", {\r\n    method: \"DELETE\"\r\n  })\r\n    .then(res => res.json())\r\n    .then(dataDelete => {\r\n      console.log(dataDelete);\r\n\r\n      const newComments = {\r\n        isHidden: false,\r\n        isDeleted: false,\r\n        isAllDeleted: true,\r\n        index: null,\r\n        _id: \"no id\",\r\n        title: \"no title\",\r\n        comments: []\r\n      };\r\n\r\n      dispatch({\r\n        type: DELETE_ALL,\r\n        payload: newComments\r\n      });\r\n    });\r\n};\r\n\r\nexport const addComment = (value, currentId) => dispatch => {\r\n  let singleBookURL = new URL(\"http://localhost:5000/api/books/\" + currentId);\r\n\r\n  fetch(singleBookURL, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n      // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n    body: JSON.stringify({\r\n      id: currentId,\r\n      comment: value\r\n    })\r\n  })\r\n    .then(res => res.json())\r\n    .then(data2 => {\r\n      //updating comments\r\n      console.log(data2);\r\n    });\r\n\r\n  let newArrayOfComments = store.getState().totalState.comments.comments;\r\n  console.log(newArrayOfComments);\r\n  newArrayOfComments.push(value);\r\n  console.log(newArrayOfComments);\r\n\r\n  const newComments = {\r\n    isHidden: false,\r\n    isDeleted: false,\r\n    isAllDeleted: false,\r\n    index: store.getState().totalState.comments.index,\r\n    _id: store.getState().totalState.comments._id,\r\n    title: store.getState().totalState.comments.title,\r\n    comments: newArrayOfComments\r\n  };\r\n\r\n  dispatch({\r\n    type: ADD_COMMENT,\r\n    payload: newComments\r\n  });\r\n};\r\n","//combining all reducers\r\n\r\nimport { combineReducers } from \"redux\";\r\n\r\nimport {\r\n  FETCH_BOOKS,\r\n  DELETE_ALL,\r\n  DISPLAY_COMMENTS,\r\n  DELETE_BOOK,\r\n  ADD_COMMENT\r\n} from \"../actions/postActions\";\r\n\r\nconst initialState = {\r\n  //represents posts that are coming from are actions,\r\n  // in actions there will be a fetch request\r\n  books: [],\r\n  //represents single post that we add\r\n  comments: {\r\n    isHidden: true,\r\n    isDeleted: false,\r\n    isAllDeleted: false,\r\n    index: null,\r\n    _id: \"no id\",\r\n    title: \"no title\",\r\n    comments: []\r\n  }\r\n};\r\n\r\n//evaluates what action type we are dealing with\r\nfunction postReducer(state = initialState, action) {\r\n  //mandatory, action.type is being evaluated\r\n  switch (action.type) {\r\n    case FETCH_BOOKS:\r\n      return {\r\n        ...state,\r\n        books: action.payload\r\n      };\r\n    case DELETE_ALL:\r\n      return {\r\n        ...state,\r\n        //books state changed automatically?\r\n        comments: action.payload\r\n      };\r\n    case DISPLAY_COMMENTS:\r\n      return {\r\n        ...state,\r\n        comments: action.payload\r\n      };\r\n    case DELETE_BOOK:\r\n      return {\r\n        ...state,\r\n        //books: [],\r\n        //books state changed automatically?\r\n        comments: action.payload\r\n      };\r\n    case ADD_COMMENT:\r\n      return {\r\n        ...state,\r\n        //books: [],\r\n        //books state changed automatically?\r\n        comments: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n// in seperate file?\r\n\r\n//object with reducers, posts - arbitrary\r\nexport default combineReducers({\r\n  totalState: postReducer\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n//index.js is the rootReducer! is imported with different name\r\nimport rootReducer from \"./reducers\";\r\n\r\n///\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState, //optinal!\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\nexport default store;\r\n","import React, { useState, useEffect } from \"react\";\r\n//import uuid from \"uuid\";\r\nimport \"./App.css\";\r\n\r\n//import {Provider} from 'react-redux';\r\n\r\n//import store from './store';\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  fetchBooks,\r\n  dispComments,\r\n  deleteAllBooks,\r\n  deleteBook,\r\n  addComment\r\n} from \"./actions/postActions\";\r\n\r\n/*\r\nRedux store: books (all books with all the data), comments (current book, changed on clicking each book)\r\n\r\nApp structure:\r\n\r\n<App{books ,comments (both from redux store),\r\nfetchBooks, dispComments, deleteAllBooks,deleteBook,addComment}) (all from postActions)>      ??? za dużo??\r\n    <NewBookForm { addBook [from App, not from postActions] } |  1x state (value for input)>\r\n    mapped <BookDisplay { index(from mapping), book(from mapping), dispComments }>\r\n    <Comments {books, comments, addComment, deleteBook, deleteAllBooks} > | 1x state (value for input)\r\n \r\n\r\nReact Only:\r\nApp ( F dispComents F addBook)  | 2x state -> books, comments to disply (for clicked book)\r\n    NewBookForm ( F. handleSubmit, -> addBook)to add a book    | 1x state (value for input)\r\n    mapped BooksDisplay (-> dispComments ->index(from mapping) ->book(from mapping)) | stateless\r\n    Comments (-> comments (state), books (state), addComment, deleteBook, books, deleteAllBooks) | 1x state (value for input)\r\n*/\r\n\r\n//redux chrome extensions has to be installed!!!!!!\r\n\r\nfunction NewBookForm({ addBook }) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (!value) return;\r\n    addBook(value);\r\n    setValue(\"\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"New Book Title\"\r\n          value={value}\r\n          onChange={e => setValue(e.target.value)}\r\n        />\r\n        <br></br>\r\n        <button style={{ width: \"148px\", height: \"25px\" }}>\r\n          Submit New Book!\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Comments({ books, comments, addComment, deleteBook, deleteAllBooks }) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    if (!value) return;\r\n    addComment(value, comments._id);\r\n    console.log(\"test\");\r\n    setValue(\"\");\r\n  }\r\n\r\n  if (comments.isHidden) {\r\n    return (\r\n      <div>\r\n        <div\r\n          style={{ borderStyle: \"solid\", borderWidth: \"thin\", padding: \"5px\" }}\r\n        >\r\n          <p>Select a book to see it's details and comments</p>\r\n        </div>\r\n        <br></br>\r\n        <button onClick={() => deleteAllBooks()}>Delete all books...</button>\r\n      </div>\r\n    );\r\n  } else {\r\n    if (comments.isAllDeleted) {\r\n      return (\r\n        <div>\r\n          <div\r\n            style={{\r\n              borderStyle: \"solid\",\r\n              borderWidth: \"thin\",\r\n              padding: \"5px\"\r\n            }}\r\n          >\r\n            <p>All books deleted</p>\r\n          </div>\r\n\r\n          {books.length !== 0 && (\r\n            <button onClick={() => deleteAllBooks()}>\r\n              Delete all books...\r\n            </button>\r\n          )}\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <p>\r\n            <b>{comments.title}</b>\r\n            {` (id: ${comments._id})`}\r\n          </p>\r\n          {comments.isDeleted ? (\r\n            <div>\r\n              <div style={{ borderStyle: \"solid\", borderWidth: \"thin\" }}>\r\n                <p>delete successful</p>\r\n                <br></br>\r\n                <br></br>\r\n                <p>Refresh the page</p>\r\n              </div>\r\n              <button onClick={() => deleteAllBooks()}>\r\n                Delete all books...\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <div\r\n                style={{\r\n                  borderStyle: \"solid\",\r\n                  borderWidth: \"thin\",\r\n                  padding: \"5px\"\r\n                }}\r\n              >\r\n                <ol>\r\n                  {comments.comments.map((comment, index) => (\r\n                    <li key={index}>{comment}</li>\r\n                  ))}\r\n                </ol>\r\n                <form onSubmit={handleSubmit}>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"New Comment\"\r\n                    value={value}\r\n                    onChange={e => setValue(e.target.value)}\r\n                  />\r\n                  <br></br>\r\n                  <button style={{ width: \"148px\", height: \"25px\" }}>\r\n                    Add Comment\r\n                  </button>\r\n                </form>\r\n                <button\r\n                  style={{ width: \"148px\", height: \"25px\" }}\r\n                  onClick={() => deleteBook(comments._id)}\r\n                >\r\n                  Delete Book\r\n                </button>\r\n              </div>\r\n\r\n              <br></br>\r\n              <button onClick={() => deleteAllBooks()}>\r\n                Delete all books...\r\n              </button>\r\n            </div>\r\n          )}\r\n          <div></div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nfunction BooksDisplay({ index, book, dispComments }) {\r\n  return (\r\n    <div>\r\n      <div className=\"BooksDisplay\">\r\n        <ul>\r\n          <li onClick={() => dispComments(index)}>\r\n            {book.title}\r\n            {` - ${book.comments.length} comments`}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n//!!!!! imported actions creators must be passed here as props\r\nfunction App({\r\n  books,\r\n  comments,\r\n  fetchBooks,\r\n  dispComments,\r\n  deleteAllBooks,\r\n  deleteBook,\r\n  addComment\r\n}) {\r\n  //const [books, setBooks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchBooks();\r\n  });\r\n\r\n  function addBook(value) {\r\n    fetch(\"http://localhost:5000/api/books\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify({\r\n        //endpoint: req.body.title\r\n        title: value\r\n      })\r\n    })\r\n      .then(res => res.json())\r\n      .then(data0 => {\r\n        console.log(data0);\r\n        //window.location.reload(true);\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h1>Personal Library </h1>\r\n        <h3 style={{ color: \"gray\" }}>\r\n          FreeCodeCamp Apis And Microservices Project 03 - MERN stack version\r\n        </h3>\r\n      </div>\r\n      <h2>User Stories</h2>\r\n      <ol>\r\n        <li>\r\n          Nothing from my website will be cached in my client as a security\r\n          measure.\r\n        </li>\r\n        <li>\r\n          I will see that the site is powered by 'PHP 4.2.0' even though it\r\n          isn't as a security measure.\r\n        </li>\r\n        <li>\r\n          I can <b>post</b> a <code>title</code> to /api/books to add a book and\r\n          returned will be the object with the <code>title</code> and a unique\r\n          <code>_id</code>.\r\n        </li>\r\n        <li>\r\n          I can <b>get</b> /api/books to retrieve an aray of all books\r\n          containing <code>title</code>, <code>_id</code>, &\r\n          <code>commentcount</code>.\r\n        </li>\r\n        <li>\r\n          I can <b>get</b> /api/books/[_id] to retrieve a single object of a\r\n          book containing <code>title</code>, <code>_id</code>, & an array of\r\n          <code>comments</code> (empty array if no comments present).\r\n        </li>\r\n        <li>\r\n          I can <b>post</b> a <code>comment</code> to /api/books/[_id] to add a\r\n          comment to a book and returned will be the books object similar to\r\n          <b>get</b> /api/books/[_id].\r\n        </li>\r\n        <li>\r\n          I can <b>delete</b> /api/books/[_id] to delete a book from the\r\n          collection. Returned will be 'delete successful' if successful.\r\n        </li>\r\n        <li>\r\n          If I try to request a book that doesn't exist I will get a 'no book\r\n          exists' message.\r\n        </li>\r\n        <li>\r\n          I can send a <b>delete</b> request to /api/books to delete all books\r\n          in the database. Returned will be 'complete delete successful' if\r\n          successful.\r\n        </li>\r\n        <li>\r\n          All 6 functional tests required are completed and passing (3 tests\r\n          will be broken when 'delete all books' button is pressed! In this\r\n          case: add a book to the data base, update id and title in\r\n          /test/func_tests.js).\r\n        </li>\r\n        <li>\r\n          (To run tests: install mocha globally, type 'mocha' in the terminal).\r\n        </li>\r\n        <li>\r\n          <b>REACT hooks Front-End implemented.</b>\r\n        </li>\r\n        <li>\r\n          <b>REDUX implemented.</b>\r\n        </li>\r\n      </ol>\r\n      <hr></hr>\r\n\r\n      <h2>Sample Front-End</h2>\r\n      <NewBookForm addBook={addBook} />\r\n      <div className=\"book-list\">\r\n        {books.map((book, index) => (\r\n          <BooksDisplay\r\n            index={index}\r\n            key={index}\r\n            book={book}\r\n            dispComments={dispComments}\r\n          />\r\n        ))}\r\n      </div>\r\n      <Comments\r\n        comments={comments}\r\n        addComment={addComment}\r\n        deleteBook={deleteBook}\r\n        books={books}\r\n        deleteAllBooks={deleteAllBooks}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    books: state.totalState.books, // (1)\r\n    comments: state.totalState.comments\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchBooks, dispComments, deleteAllBooks, deleteBook, addComment }\r\n)(App); // (3)\r\n//export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './store';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport AppContainer from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <AppContainer />\r\n  </Provider>, document.getElementById('root'),\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}